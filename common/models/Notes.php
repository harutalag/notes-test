<?php

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Exception;

/**
 * This is the model class for table "notes".
 *
 * @property int $id
 * @property int|null $user_id
 * @property string|null $title
 * @property string|null $text
 * @property int|null $order
 * @property int $status
 * @property int|null $created_at
 * @property int|null $updated_at
 * @property int|null $deleted_at
 *
 * @property NotesHasTags[] $notesHasTags
 * @property User $user
 */
class Notes extends \yii\db\ActiveRecord
{

    const STATUS_DELETED = 0;
    const STATUS_ACTIVE = 10;

    const STATUS_LIST = [
        self::STATUS_DELETED => 'Not active',
        self::STATUS_ACTIVE => 'Active'
    ];

    public $tags;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'notes';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                    ActiveRecord::EVENT_BEFORE_DELETE => ['deleted_at'],
                ],
            ]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['user_id', 'order', 'status', 'created_at', 'updated_at', 'deleted_at'], 'integer'],
            [['text'], 'string'],
            [['title'], 'string', 'max' => 255],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['user_id' => 'id']],

            ['tags', 'safe']
        ];
    }

    /**
     * Overrides parent method.
     * Saves the current record and updates related BookAuthor records
     * @inheritdoc
     */

    public function save($runValidation = true, $attributeNames = null)
    {
        $transaction = \Yii::$app->db->beginTransaction();
        try {
            if (!parent::save($runValidation, $attributeNames)) {
                return false;
            }

            $this->addNewTags();
            $this->deleteOldTags();

            $transaction->commit();
        } catch (\Exception $e) {
            $transaction->rollBack();
            throw $e;
        }
        return true;
    }

    public function beforeSave($insert)
    {
        if ($insert){
            $this->user_id = Yii::$app->user->id;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public static function find()
    {
        return parent::find()->where(['deleted_at' => null]);
    }

    public function afterFind()
    {
        foreach ($this->notesHasTags as $notesHasTags) {
            $this->tags[] = $notesHasTags->tag_id;
        }

        parent::afterFind();
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'User ID',
            'title' => 'Title',
            'text' => 'Text',
            'order' => 'Order',
            'status' => 'Status',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'deleted_at' => 'Deleted At',
        ];
    }

    /**
     * Gets query for [[NotesHasTags]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getNotesHasTags()
    {
        return $this->hasMany(NotesHasTags::class, ['note_id' => 'id']);
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::class, ['id' => 'user_id']);
    }

    /**
     *
     * @throws Exception update failed
     */
    protected function addNewTags()
    {
        // Add new records

        foreach ($this->tags as $tagID) {
            $notesHasTags = new NotesHasTags();
            $notesHasTags->note_id = $this->id;
            $notesHasTags->tag_id = $tagID;

            if (!$notesHasTags->save()) {
                throw new Exception('Failed to save related records.');
            }
        }
    }

    /**
     *
     * @throws Exception update failed
     */
    protected function deleteOldTags()
    {
        foreach ($this->notesHasTags as $notesHasTags) {
            if (!in_array($notesHasTags->tag_id, $this->tags) &&
                $notesHasTags->delete() === false) {
                throw new Exception('Failed to save related records.');
            }
        }
    }
}
